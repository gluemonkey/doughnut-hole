{"version":3,"file":"index.js","sources":["../src/components/DoughnutChartSegment.js","../src/utils.js","../src/components/DoughnutChart.js"],"sourcesContent":["import React, { Component } from 'react'\n\nconst calcSegmentConfig = (percent, offset, props) => {\n  const { color, showSeperator} = props\n  const segmentOffset = 25\n  const seperatorPercentage = showSeperator ? 0.7 : 0\n  const mainSegPercentage =  Math.max(0, (percent - seperatorPercentage))\n\n  return {\n    dasharray: `${mainSegPercentage} ${100 - mainSegPercentage}`,\n    rotation: ((offset + segmentOffset) / 100) * 360,\n    dashoffset: `0`,\n    color: color\n  }\n}\n\nconst CircleElement = ({children, initalSegmentConfig, animatedSegmentConfig, ...props}) => {\n  const activeStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.3s, 0s',\n    transitionDelay: '0s, 0s',\n    transitionTimingFunction: 'linear, linear',\n    strokeDasharray: animatedSegmentConfig.dasharray,\n    strokeDashoffset: animatedSegmentConfig.dashoffset\n  }\n\n  const inactiveStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.3s, 0s',\n    transitionDelay: '0s, 0s',\n    transitionTimingFunction: 'linear, linear',\n    strokeDasharray: initalSegmentConfig.dasharray,\n    strokeDashoffset: initalSegmentConfig.dashoffset\n  }\n  const calcStyles = props.animatedIn ? activeStyles : inactiveStyles\n  return (\n    <circle\n      {...props}\n      style={calcStyles} />\n  )\n}\n\nclass DoughnutChartSegment extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      animate: false\n    }\n  }\n\n  componentDidMount() {\n    if (this.props.percent !== this.props.fromPercent) {\n      setTimeout(() => {\n        this.setState({ animate: true })\n      }, 0)\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.percent !== prevProps.percent && this.props.percent !== this.props.fromPercent) {\n      setTimeout(() => {\n        this.setState({ animate: true })\n      }, 0)\n    }\n  }\n\n  render() {\n    const { percent, fromPercent, isInital, fromOffset, offset, color, lineWidth, showSeperator, segmentStyle} = this.props\n    const { animate } = this.state\n\n    const initialSegmentConfig = calcSegmentConfig(fromPercent, fromOffset, this.props)\n    const toSegmentConfig = calcSegmentConfig(percent, offset, this.props)\n\n    const segmentContainerStyle = {\n      transformOrigin: 'center 50%',\n      transitionProperty: 'all',\n      transitionDuration: '0.3s',\n      transitionDelay: '0s',\n      transitionTimingFunction: 'linear',\n      opacity: 1,\n      transform: animate ? `rotate(${toSegmentConfig.rotation}deg)` : `rotate(${initialSegmentConfig.rotation}deg)`\n    }\n\n    return (\n      <g style={segmentContainerStyle}>\n        <CircleElement\n          cx='21'\n          cy='21'\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke={toSegmentConfig.color}\n          animatedIn={animate}\n          strokeWidth={lineWidth}\n          initalSegmentConfig={initialSegmentConfig}\n          animatedSegmentConfig={toSegmentConfig} />\n        {segmentStyle === 'raised' &&\n          <CircleElement\n            cx='21'\n            cy='21'\n            r='15.91549430918953357688837633725143'\n            fill='transparent'\n            stroke='url(#grad1)'\n            animatedIn={animate}\n            strokeWidth={lineWidth}\n            initalSegmentConfig={initialSegmentConfig}\n            animatedSegmentConfig={toSegmentConfig} />\n        }\n      </g>\n    )\n  }\n}\n\nexport default DoughnutChartSegment\n","export const add = (a, b) => a + b\nexport const uniq = (value, index, self) => self.indexOf(value) === index\nexport const sum = (value) => value.reduce(add)\n","import React, { Component } from 'react'\nimport DoughnutChartSegment from './DoughnutChartSegment'\nimport { sum } from '../utils'\n\nconst LabelContainerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#333333',\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  width: '100%',\n  height: '100%'\n}\n\nconst CircleBoxStyle = {\n  position: 'relative',\n  padding: '14px 30px 94% 30px'\n}\n\nconst SVGStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0\n}\n\nconst segmentShown = (segment, filters) => segment.value === 0 || filters.includes(segment.key)\n\nconst getSegmentConfigs = (segments, filters) => {\n  let segmentObjects = []\n  let segmentPercentage = 0\n  let remainderPercentage = 0\n  let hiddenSegmentCount = 0\n\n  const total = sum(segments.map((seg) => seg.value))\n\n  segments.forEach((segment) => {\n    const { value } = segment\n    const percent = (value / total) * 100\n    if (segmentShown(segment, filters)) {\n      remainderPercentage += percent\n      hiddenSegmentCount += 1\n    }\n  })\n\n  const eachSectionGets = remainderPercentage / (segments.length - hiddenSegmentCount)\n\n  segments.forEach((segment) => {\n    const { value, color } = segment\n    const percent = (value / total) * 100\n    let segPercent = eachSectionGets + percent\n    if (segmentShown(segment, filters)) {\n      segPercent = 0\n    };\n\n    segmentObjects.push({\n      percent: segPercent,\n      offset: segmentPercentage,\n      color: color,\n      showSeperator: hiddenSegmentCount < segments.length - 1,\n      shown: percent !== 0\n    })\n\n    segmentPercentage += segPercent\n  })\n\n  return segmentObjects\n}\n\nclass DoughnutChart extends Component {\n  static defaultProps = {\n    animate: true,\n    animationDuration: '1s',\n    lineWidth: '9',\n    dropShadow: false,\n    percentSpacing: 10,\n    segmentStyle: 'raised'\n  }\n\n  animationTimer = null;\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      segments: props.segments,\n      oldSegments: props.segments,\n      filters: [],\n      isInital: true\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      ...state,\n      filters: props.filters,\n      segments: props.segments,\n      oldSegments: state.segments\n    }\n  }\n\n  render() {\n    const { className, lineWidth, dropShadow, filters, segmentStyle, children } = this.props\n\n    const newsegmentObjects = getSegmentConfigs(this.state.segments, filters)\n    const oldSegmentObjects = getSegmentConfigs(this.state.oldSegments, filters)\n\n    let segmentObjects = []\n\n    //this means one was removed or stayed same so merge new into old with old getting 0 percent\n    if (oldSegmentObjects.length >= newsegmentObjects.length) {\n      segmentObjects = oldSegmentObjects.map((seg, idx) => {\n        const relatedNewObj = newsegmentObjects[idx] || {\n          ...seg,\n          offset: 100,\n          percent: 0\n        }\n        return {\n          ...seg,\n          fromOffset: seg.offset,\n          offset: relatedNewObj.offset,\n          fromPercent: seg.percent,\n          percent: relatedNewObj.percent\n        }\n      })\n    }\n\n    //this means one was added\n    if (oldSegmentObjects.length < newsegmentObjects.length) {\n      segmentObjects = newsegmentObjects.map((seg, idx) => {\n        const relatedOldObj = oldSegmentObjects[idx] || {\n          ...seg,\n          offset: 100,\n          percent: 0\n        }\n        return {\n          ...seg,\n          offset: seg.offset,\n          fromOffset: relatedOldObj.offset,\n          percent: seg.percent,\n          fromPercent: relatedOldObj.percent\n        }\n      })\n    }\n\n    return (\n      <div className={className}>\n        <div style={CircleBoxStyle}>\n          {dropShadow &&\n            <svg width='100%' viewBox='0 0 42 46' style={SVGStyle}>\n              <defs>\n                <radialGradient id='drop' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                  <stop offset='0%' stopColor='#000' stopOpacity='0.4' />\n                  <stop offset='40%' stopColor='#000' stopOpacity='0' />\n                </radialGradient>\n              </defs>\n              <circle\n                cx='16.4'\n                cy='206'\n                className={'shadow'}\n                r='15.91549430918954'\n                fill='url(#drop)'\n                stroke='transparent'\n                strokeWidth='0'\n                transform='scale(1.3,0.2)'\n                style={{\n                  transition: 'opacity 0.5s ease-in-out',\n                  opacity: 1\n                }} />\n            </svg>\n          }\n          <svg width='100%' height='100%' viewBox='0 0 42 42' style={SVGStyle}>\n            <defs>\n              <radialGradient id='grad1' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                <stop offset='20%' stopColor='#000' stopOpacity='0.5' />\n                <stop offset='50%' stopColor='#000' stopOpacity='0' />\n                <stop offset='80%' stopColor='#000' stopOpacity='0.5' />\n              </radialGradient>\n            </defs>\n            {segmentObjects.map((segmentObject) =>\n              <DoughnutChartSegment\n                segmentShown={segmentObject.shown}\n                percent={segmentObject.percent}\n                fromPercent={segmentObject.fromPercent}\n                offset={segmentObject.offset}\n                fromOffset={segmentObject.fromOffset}\n                delay={segmentObject.delay}\n                color={segmentObject.color}\n                segId={segmentObject.segId}\n                isInital={this.state.isInital}\n                segmentStyle={segmentStyle}\n                showSeperator={segmentObject.showSeperator}\n                lineWidth={lineWidth} />\n            )}\n          </svg>\n          <div style={LabelContainerStyle}>\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n// DoughnutChart.propTypes = {\n//   // segments: PropTypes.array\n// }\n\nexport default DoughnutChart\n"],"names":["calcSegmentConfig","percent","offset","props","color","showSeperator","segmentOffset","seperatorPercentage","mainSegPercentage","Math","max","CircleElement","children","initalSegmentConfig","animatedSegmentConfig","activeStyles","dasharray","dashoffset","inactiveStyles","calcStyles","animatedIn","React","DoughnutChartSegment","state","fromPercent","setState","animate","prevProps","prevState","snapshot","isInital","fromOffset","lineWidth","segmentStyle","initialSegmentConfig","toSegmentConfig","segmentContainerStyle","rotation","Component","add","a","b","sum","value","reduce","LabelContainerStyle","CircleBoxStyle","SVGStyle","segmentShown","segment","filters","includes","key","getSegmentConfigs","segments","segmentObjects","segmentPercentage","remainderPercentage","hiddenSegmentCount","total","map","seg","forEach","eachSectionGets","length","segPercent","push","DoughnutChart","animationTimer","className","dropShadow","newsegmentObjects","oldSegmentObjects","oldSegments","idx","relatedNewObj","relatedOldObj","segmentObject","shown","delay","segId","defaultProps"],"mappings":"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"}
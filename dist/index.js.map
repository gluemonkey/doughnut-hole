{"version":3,"file":"index.js","sources":["../src/components/DoughnutChartSegment.js","../src/utils.js","../src/components/DoughnutChart.js"],"sourcesContent":["import React, { Component } from 'react'\n\nconst CircleElement = ({children, ...props}) => {\n  const activeStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.5s, 0s',\n    transitionDelay: '0s, 0s',\n    transitionTimingFunction: 'ease-in-out, ease-in-out',\n  }\n  const inactiveStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.5s, 0s',\n    transitionDelay: '0s, 0.5s',\n    transitionTimingFunction: 'ease-in-out, ease-in-out',\n  }\n  const calcStyles = props.opacity === 1 ? activeStyles : inactiveStyles\n  return (\n    <circle\n      {...props}\n      style={calcStyles} />\n  )\n}\n\nclass DoughnutChartSegment extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: false,\n      shown: false,\n      percentage: 0,\n    }\n  }\n\n  render() {\n    const { percent, offset, color, lineWidth, shown, delay, showSeperator, segmentShown} = this.props;\n    const segmentOffset = 25;\n    const seperatorPercentage = showSeperator ? 0.7 : 0;\n    const mainSegPercentage = Math.max(0, (percent - seperatorPercentage));\n\n    const mainSegmentConfig = {\n      dasharray: `${mainSegPercentage} ${100-mainSegPercentage}`,\n      rotation: ((offset + segmentOffset) / 100) * 360,\n      dashoffset: `0`,\n      color: color\n      // delay: delay,\n    }\n\n    const segmentContainerStyle = {\n      transformOrigin: 'center 45.8%',\n      transitionProperty: 'all',\n      transitionDuration: '0.5s',\n      transitionDelay: '0s',\n      transitionTimingFunction: 'ease-in-out',\n      // opacity: (shown ? 1 : 0),\n      opacity: 1,\n      transform: `scale(0.8) rotate(${mainSegmentConfig.rotation}deg)`\n    }\n\n    return (\n      <g style={segmentContainerStyle}>\n        <CircleElement\n          cx='21'\n          cy='21'\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke={mainSegmentConfig.color}\n          strokeWidth={lineWidth}\n          // opacity={segmentShown ? 1 : 0}\n          strokeDasharray={mainSegmentConfig.dasharray}\n          strokeDashoffset={mainSegmentConfig.dashoffset} />\n        <CircleElement\n          cx='21'\n          cy='21'\n          // opacity={segmentShown ? 1 : 0}\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke='url(#grad1)'\n          strokeWidth={lineWidth}\n          strokeDasharray={mainSegmentConfig.dasharray}\n          strokeDashoffset={mainSegmentConfig.dashoffset} />\n      </g>\n    )\n  }\n}\n\nexport default DoughnutChartSegment\n","export const add = (a, b) => a + b\nexport const uniq = (value, index, self) => self.indexOf(value) === index\nexport const sum = (value) => value.reduce(add)\n","import React, { Component } from 'react'\nimport DoughnutChartSegment from './DoughnutChartSegment'\nimport { sum } from '../utils'\n\nconst ContainerStyle = {\n  position: 'relative',\n  maxWidth: '260px',\n  color: 'white',\n  border: '1px solid #cccccc',\n  borderRadius: '6px',\n  overflow: 'hidden',\n  margin: '18px'\n}\n\nconst LabelStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#333333',\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  width: '100%',\n  height: '92%'\n}\n\nconst CircleBoxStyle = {\n  position: 'relative',\n  padding: '14px 30px 0 30px'\n}\n\nconst getSegmentConfigs = (props) => {\n  const { segments } = props\n\n  let segmentObjects = []\n  let segmentPercentage = 0\n  let remainderPercentage = 0\n  let unshown = 0\n  let int = 0\n\n  const total = sum(segments.map((seg) => seg.value))\n\n  segments.forEach(({key, value, color}) => {\n    const percent = (value / total) * 100\n    if (percent === 0) {\n      remainderPercentage += percent\n      unshown += 1\n    }\n  })\n\n  const eachSectionGets = remainderPercentage / (segments.length - unshown)\n\n  segments.forEach(({key, value, color}) => {\n    const percent = (value / total) * 100\n    let segPercent = eachSectionGets + percent\n    if (value === 0) {\n      segPercent = 0\n    };\n\n    segmentObjects.push({\n      percent: segPercent,\n      offset: segmentPercentage,\n      color: color,\n      delay: (int * 0.3) + 0.1,\n      showSeperator: unshown < 2,\n      shown: percent !== 0\n    })\n\n    int += 1\n    segmentPercentage += segPercent\n  })\n\n  return segmentObjects\n}\n\nclass DoughnutChart extends Component {\n  static defaultProps = {\n    progress: 0,\n    animate: true,\n    animationDuration: '1s',\n    showPercentage: true,\n    showPercentageSymbol: true,\n    progressColor: '#000',\n    bgColor: '#000',\n    textColor: '#6b778c',\n    size: '400',\n    lineWidth: '9',\n    percentSpacing: 10\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isVisible: false,\n      shown: false,\n      percentage: 0\n    }\n  }\n\n  render() {\n    const { className, shown, lineWidth } = this.props\n\n    let segmentObjects = getSegmentConfigs(this.props)\n\n    return (\n      <div className={className}>\n        <div style={ContainerStyle}>\n          <div style={CircleBoxStyle}>\n            <svg width='100%' height='100%' viewBox='0 0 42 46' className='donut'>\n              <defs>\n                <radialGradient id='grad1' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                  <stop offset='20%' stopColor='#000' stopOpacity='0.5' />\n                  <stop offset='50%' stopColor='#000' stopOpacity='0' />\n                  <stop offset='80%' stopColor='#000' stopOpacity='0.5' />\n                </radialGradient>\n                <radialGradient id='drop' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                  <stop offset='0%' stopColor='#000' stopOpacity='0.4' />\n                  <stop offset='40%' stopColor='#000' stopOpacity='0' />\n                </radialGradient>\n              </defs>\n              <circle\n                cx='19.4'\n                cy='206'\n                className={'shadow'}\n                r='15.91549430918954'\n                fill='url(#drop)'\n                stroke='transparent'\n                strokeWidth='0'\n                transform='scale(1.1,0.2)'\n                style={{\n                  transition: 'opacity 0.5s ease-in-out',\n                  opacity: 1\n                  // opacity: shown ? 1 : 0\n                }} />\n              {segmentObjects.map((segmentObject) =>\n                <DoughnutChartSegment\n                  shown={shown}\n                  segmentShown={segmentObject.shown}\n                  percent={segmentObject.percent}\n                  offset={segmentObject.offset}\n                  delay={segmentObject.delay}\n                  color={segmentObject.color}\n                  showSeperator={segmentObject.showSeperator}\n                  lineWidth={lineWidth} />\n              )}\n            </svg>\n            <div style={LabelStyle}>\n              <p>Label Here</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n// DoughnutChart.propTypes = {\n//   // segments: PropTypes.array\n// }\n\nexport default DoughnutChart\n"],"names":["CircleElement","children","props","activeStyles","inactiveStyles","calcStyles","opacity","React","DoughnutChartSegment","state","percent","offset","color","lineWidth","shown","delay","showSeperator","segmentShown","segmentOffset","seperatorPercentage","mainSegPercentage","Math","max","mainSegmentConfig","segmentContainerStyle","rotation","dasharray","dashoffset","Component","add","a","b","sum","value","reduce","ContainerStyle","LabelStyle","CircleBoxStyle","getSegmentConfigs","segments","segmentObjects","segmentPercentage","remainderPercentage","unshown","int","total","map","seg","forEach","key","eachSectionGets","length","segPercent","push","DoughnutChart","className","segmentObject","defaultProps"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA,IAAMA,gBAAgB,SAAhBA,aAAgB,OAA0B;MAAxBC,QAAwB,QAAxBA,QAAwB;MAAXC,KAAW;;MACxCC,eAAe;wBACC,cADD;wBAEC,UAFD;qBAGF,QAHE;8BAIO;GAJ5B;MAMMC,iBAAiB;wBACD,cADC;wBAED,UAFC;qBAGJ,UAHI;8BAIK;GAJ5B;MAMMC,aAAaH,MAAMI,OAAN,KAAkB,CAAlB,GAAsBH,YAAtB,GAAqCC,cAAxD;SAEEG,oDACML,KADN;WAESG,UAFT,IADF;CAdF;;IAqBMG;;;gCACQN,KAAZ,EAAmB;;;2IACXA,KADW;;UAEZO,KAAL,GAAa;iBACA,KADA;aAEJ,KAFI;kBAGC;KAHd;;;;;;6BAOO;mBACiF,KAAKP,KADtF;UACCQ,OADD,UACCA,OADD;UACUC,MADV,UACUA,MADV;UACkBC,KADlB,UACkBA,KADlB;UACyBC,SADzB,UACyBA,SADzB;UACoCC,KADpC,UACoCA,KADpC;UAC2CC,KAD3C,UAC2CA,KAD3C;UACkDC,aADlD,UACkDA,aADlD;UACiEC,YADjE,UACiEA,YADjE;;UAEDC,gBAAgB,EAAtB;UACMC,sBAAsBH,gBAAgB,GAAhB,GAAsB,CAAlD;UACMI,oBAAoBC,KAAKC,GAAL,CAAS,CAAT,EAAaZ,UAAUS,mBAAvB,CAA1B;;UAEMI,oBAAoB;mBACVH,iBAAd,UAAmC,MAAIA,iBAAvC,CADwB;kBAEb,CAACT,SAASO,aAAV,IAA2B,GAA5B,GAAmC,GAFrB;uBAAA;eAIjBN;;OAJT;;UAQMY,wBAAwB;yBACX,cADW;4BAER,KAFQ;4BAGR,MAHQ;yBAIX,IAJW;kCAKF,aALE;;iBAOnB,CAPmB;0CAQID,kBAAkBE,QAAlD;OARF;;aAYElB;;UAAG,OAAOiB,qBAAV;qCACG,aAAD;cACK,IADL;cAEK,IAFL;aAGI,qCAHJ;gBAIO,aAJP;kBAKUD,kBAAkBX,KAL5B;uBAMeC;;YAEb,iBAAiBU,kBAAkBG,SARrC;4BASoBH,kBAAkBI,UATtC,GADF;qCAWG,aAAD;cACK,IADL;cAEK;;YAEH,GAAE,qCAJJ;gBAKO,aALP;kBAMS,aANT;uBAOed,SAPf;2BAQmBU,kBAAkBG,SARrC;4BASoBH,kBAAkBI,UATtC;OAZJ;;;;EAnC+BC;;ACvB5B,IAAMC,MAAM,SAANA,GAAM,CAACC,CAAD,EAAIC,CAAJ;SAAUD,IAAIC,CAAd;CAAZ;AACP,AACO,IAAMC,MAAM,SAANA,GAAM,CAACC,KAAD;SAAWA,MAAMC,MAAN,CAAaL,GAAb,CAAX;CAAZ;;ACEP,IAAMM,iBAAiB;YACX,UADW;YAEX,OAFW;SAGd,OAHc;UAIb,mBAJa;gBAKP,KALO;YAMX,QANW;UAOb;CAPV;;AAUA,IAAMC,aAAa;WACR,MADQ;iBAEF,QAFE;kBAGD,QAHC;cAIL,QAJK;SAKV,SALU;YAMP,UANO;OAOZ,GAPY;QAQX,GARW;SASV,MATU;UAUT;CAVV;;AAaA,IAAMC,iBAAiB;YACX,UADW;WAEZ;CAFX;;AAKA,IAAMC,oBAAoB,SAApBA,iBAAoB,CAACpC,KAAD,EAAW;MAC3BqC,QAD2B,GACdrC,KADc,CAC3BqC,QAD2B;;;MAG/BC,iBAAiB,EAArB;MACIC,oBAAoB,CAAxB;MACIC,sBAAsB,CAA1B;MACIC,UAAU,CAAd;MACIC,MAAM,CAAV;;MAEMC,QAAQb,IAAIO,SAASO,GAAT,CAAa,UAACC,GAAD;WAASA,IAAId,KAAb;GAAb,CAAJ,CAAd;;WAESe,OAAT,CAAiB,gBAAyB;QAAvBC,GAAuB,QAAvBA,GAAuB;QAAlBhB,KAAkB,QAAlBA,KAAkB;QAAXrB,KAAW,QAAXA,KAAW;;QAClCF,UAAWuB,QAAQY,KAAT,GAAkB,GAAlC;QACInC,YAAY,CAAhB,EAAmB;6BACMA,OAAvB;iBACW,CAAX;;GAJJ;;MAQMwC,kBAAkBR,uBAAuBH,SAASY,MAAT,GAAkBR,OAAzC,CAAxB;;WAESK,OAAT,CAAiB,iBAAyB;QAAvBC,GAAuB,SAAvBA,GAAuB;QAAlBhB,KAAkB,SAAlBA,KAAkB;QAAXrB,KAAW,SAAXA,KAAW;;QAClCF,UAAWuB,QAAQY,KAAT,GAAkB,GAAlC;QACIO,aAAaF,kBAAkBxC,OAAnC;QACIuB,UAAU,CAAd,EAAiB;mBACF,CAAb;;mBAGaoB,IAAf,CAAoB;eACTD,UADS;cAEVX,iBAFU;aAGX7B,KAHW;aAIVgC,MAAM,GAAP,GAAc,GAJH;qBAKHD,UAAU,CALP;aAMXjC,YAAY;KANrB;;WASO,CAAP;yBACqB0C,UAArB;GAjBF;;SAoBOZ,cAAP;CAzCF;;IA4CMc;;;yBAeQpD,KAAZ,EAAmB;;;6HACXA,KADW;;UAEZO,KAAL,GAAa;iBACA,KADA;aAEJ,KAFI;kBAGC;KAHd;;;;;;6BAOO;mBACiC,KAAKP,KADtC;UACCqD,SADD,UACCA,SADD;UACYzC,KADZ,UACYA,KADZ;UACmBD,SADnB,UACmBA,SADnB;;;UAGH2B,iBAAiBF,kBAAkB,KAAKpC,KAAvB,CAArB;;aAGEK;;UAAK,WAAWgD,SAAhB;;;YACO,OAAOpB,cAAZ;;;cACO,OAAOE,cAAZ;;;gBACO,OAAM,MAAX,EAAkB,QAAO,MAAzB,EAAgC,SAAQ,WAAxC,EAAoD,WAAU,OAA9D;;;;;;oBAEoB,IAAG,OAAnB,EAA2B,IAAG,KAA9B,EAAoC,IAAG,KAAvC,EAA6C,GAAE,MAA/C,EAAsD,IAAG,KAAzD,EAA+D,IAAG,KAAlE;yDACQ,QAAO,KAAb,EAAmB,WAAU,MAA7B,EAAoC,aAAY,KAAhD,GADF;yDAEQ,QAAO,KAAb,EAAmB,WAAU,MAA7B,EAAoC,aAAY,GAAhD,GAFF;yDAGQ,QAAO,KAAb,EAAmB,WAAU,MAA7B,EAAoC,aAAY,KAAhD;iBAJJ;;;oBAMkB,IAAG,MAAnB,EAA0B,IAAG,KAA7B,EAAmC,IAAG,KAAtC,EAA4C,GAAE,MAA9C,EAAqD,IAAG,KAAxD,EAA8D,IAAG,KAAjE;yDACQ,QAAO,IAAb,EAAkB,WAAU,MAA5B,EAAmC,aAAY,KAA/C,GADF;yDAEQ,QAAO,KAAb,EAAmB,WAAU,MAA7B,EAAoC,aAAY,GAAhD;;eATN;;oBAaO,MADL;oBAEK,KAFL;2BAGa,QAHb;mBAII,mBAJJ;sBAKO,YALP;wBAMS,aANT;6BAOc,GAPd;2BAQY,gBARZ;uBASS;8BACO,0BADP;2BAEI;;iBAXb,GAZF;6BA0BkBS,GAAf,CAAmB,UAACU,aAAD;uBAClBjD,6BAAC,oBAAD;yBACSO,KADT;gCAEgB0C,cAAc1C,KAF9B;2BAGW0C,cAAc9C,OAHzB;0BAIU8C,cAAc7C,MAJxB;yBAKS6C,cAAczC,KALvB;yBAMSyC,cAAc5C,KANvB;iCAOiB4C,cAAcxC,aAP/B;6BAQaH,SARb,GADkB;eAAnB;aA3BL;;;gBAuCO,OAAOuB,UAAZ;;;;;;;;;OA1CR;;;;EA7BwBR;;;;;;AAAtB0B,cACGG,eAAe;YACV,CADU;WAEX,IAFW;qBAGD,IAHC;kBAIJ,IAJI;wBAKE,IALF;iBAML,MANK;WAOX,MAPW;aAQT,SARS;QASd,KATc;aAUT,GAVS;kBAWJ;;;;;"}
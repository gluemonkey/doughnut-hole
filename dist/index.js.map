{"version":3,"file":"index.js","sources":["../src/components/DoughnutChartSegment.js","../src/utils.js","../src/components/DoughnutChart.js"],"sourcesContent":["import React, { Component } from 'react'\n\nconst CircleElement = ({children, dasharray, dashoffset, ...props}) => {\n  const activeStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.3s, 0s',\n    transitionDelay: '0s, 0s',\n    transitionTimingFunction: 'linear, linear',\n    strokeDasharray: dasharray,\n    strokeDashoffset: dashoffset\n  }\n  const inactiveStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.3s, 0s',\n    transitionDelay: '0s, 0.3s',\n    transitionTimingFunction: 'linear, linear',\n    strokeDasharray: dasharray,\n    strokeDashoffset: dashoffset\n  }\n  const calcStyles = props.opacity === 1 ? activeStyles : inactiveStyles\n  return (\n    <circle\n      {...props}\n      style={calcStyles} />\n  )\n}\n\nclass DoughnutChartSegment extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      animate: false\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ animate: true })\n    }, 0)\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.percent === 0) {\n      clearTimeout(this.animationTimeout)\n      this.animationTimeout = setTimeout(() => this.props.onAnimationComplete(this.props.segId), 300)\n    }\n    if (!this.state.animate) {\n      requestAnimationFrame(() => {\n        debugger;\n        this.setState({ animate: true })\n      })\n    }\n  }\n\n  animationTimeout = null;\n\n  render() {\n    const { percent, isInital, offset, color, lineWidth, showSeperator} = this.props\n    const { animate } = this.state\n    const segmentOffset = 0\n    const seperatorPercentage = showSeperator ? 0.7 : 0\n    const mainSegPercentage = (animate || isInital) ? Math.max(0, (percent - seperatorPercentage)) : 0\n\n    const mainSegmentConfig = {\n      dasharray: `${mainSegPercentage} ${100 - mainSegPercentage}`,\n      rotation: ((offset + segmentOffset) / 100) * 360,\n      dashoffset: `0`,\n      color: color\n    }\n\n    const segmentContainerStyle = {\n      transformOrigin: 'center 50%',\n      transitionProperty: 'all',\n      transitionDuration: '0.3s',\n      transitionDelay: '0s',\n      transitionTimingFunction: 'linear',\n      opacity: 1,\n      transform: `rotate(${mainSegmentConfig.rotation}deg)`\n    }\n\n    return (\n      <g style={segmentContainerStyle}>\n        <CircleElement\n          cx='21'\n          cy='21'\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke={mainSegmentConfig.color}\n          strokeWidth={lineWidth}\n          dasharray={mainSegmentConfig.dasharray}\n          dashoffset={mainSegmentConfig.dashoffset} />\n        <CircleElement\n          cx='21'\n          cy='21'\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke='url(#grad1)'\n          strokeWidth={lineWidth}\n          dasharray={mainSegmentConfig.dasharray}\n          dashoffset={mainSegmentConfig.dashoffset} />\n      </g>\n    )\n  }\n}\n\nexport default DoughnutChartSegment\n","export const add = (a, b) => a + b\nexport const uniq = (value, index, self) => self.indexOf(value) === index\nexport const sum = (value) => value.reduce(add)\n","import React, { Component } from 'react'\nimport DoughnutChartSegment from './DoughnutChartSegment'\nimport { sum } from '../utils'\n\nconst LabelContainerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#333333',\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  width: '100%',\n  height: '100%'\n}\n\nconst CircleBoxStyle = {\n  position: 'relative',\n  padding: '14px 30px 75% 30px'\n}\n\nconst SVGStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0\n}\n\nconst segmentShown = (segment, props) => segment.value === 0 || props.filters.includes(segment.key)\n\nconst getSegmentConfigs = (props) => {\n  const { segments } = props\n\n  let segmentObjects = []\n  let segmentPercentage = 0\n  let remainderPercentage = 0\n  let hiddenSegmentCount = 0\n\n  const total = sum(segments.map((seg) => seg.value))\n\n  segments.forEach((segment) => {\n    const { value } = segment\n    const percent = (value / total) * 100\n    if (segmentShown(segment, props)) {\n      remainderPercentage += percent\n      hiddenSegmentCount += 1\n    }\n  })\n\n  const eachSectionGets = remainderPercentage / (segments.length - hiddenSegmentCount)\n\n  segments.forEach((segment) => {\n    const { value, color } = segment\n    const percent = (value / total) * 100\n    let segPercent = eachSectionGets + percent\n    if (segmentShown(segment, props)) {\n      segPercent = 0\n    };\n\n    segmentObjects.push({\n      percent: segPercent,\n      offset: segmentPercentage,\n      color: color,\n      showSeperator: hiddenSegmentCount < segments.length - 1,\n      shown: percent !== 0\n    })\n\n    segmentPercentage += segPercent\n  })\n\n  return segmentObjects\n}\n\nclass DoughnutChart extends Component {\n  static defaultProps = {\n    progress: 0,\n    animate: true,\n    animationDuration: '1s',\n    showPercentage: true,\n    showPercentageSymbol: true,\n    progressColor: '#000',\n    bgColor: '#000',\n    textColor: '#6b778c',\n    size: '400',\n    lineWidth: '9',\n    dropShadow: true,\n    percentSpacing: 10\n  }\n\n  animationTimer = null;\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      segments: [],\n      fitlers: [],\n      isInital: true\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    if (props.segments.length < state.segments.length) {\n      const splicedSegments = state.segments.slice(-(state.segments.length - props.segments.length)).map((seg) => { return {...seg, ...{value: 0}} })\n      const calcSegments = [...props.segments, ...splicedSegments]\n      return {\n        ...state,\n        segments: calcSegments,\n        filters: props.filters\n      }\n    }\n\n    return {\n      ...state,\n      segments: props.segments,\n      filters: props.filters\n    }\n  }\n\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({ isInital: false })\n    }, 500)\n  }\n\n  onSegmentAnimationComplete = (segId) => {\n    const found = this.props.segments.findIndex((segment) => segment.segId === segId) !== -1\n    if (!found) {\n      this.setState({segments: this.state.segments.filter((seg) => seg.id !== segId)})\n    }\n  }\n\n  render() {\n    const { className, show, lineWidth, dropShadow } = this.props\n\n    let segmentObjects = getSegmentConfigs(this.state)\n\n    return (\n      <div className={className}>\n        <div style={CircleBoxStyle}>\n          {dropShadow &&\n            <svg width='100%' height='100%' viewBox='0 0 42 46' style={SVGStyle}>\n              <defs>\n                <radialGradient id='drop' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                  <stop offset='0%' stopColor='#000' stopOpacity='0.4' />\n                  <stop offset='40%' stopColor='#000' stopOpacity='0' />\n                </radialGradient>\n              </defs>\n              <circle\n                cx='16.4'\n                cy='206'\n                className={'shadow'}\n                r='15.91549430918954'\n                fill='url(#drop)'\n                stroke='transparent'\n                strokeWidth='0'\n                transform='scale(1.3,0.2)'\n                style={{\n                  transition: 'opacity 0.5s ease-in-out',\n                  opacity: show ? 1 : 0\n                }} />\n            </svg>\n          }\n          <svg width='100%' height='100%' viewBox='0 0 42 42' style={SVGStyle}>\n            <defs>\n              <radialGradient id='grad1' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                <stop offset='20%' stopColor='#000' stopOpacity='0.5' />\n                <stop offset='50%' stopColor='#000' stopOpacity='0' />\n                <stop offset='80%' stopColor='#000' stopOpacity='0.5' />\n              </radialGradient>\n            </defs>\n            {segmentObjects.map((segmentObject) =>\n              <DoughnutChartSegment\n                segmentShown={segmentObject.shown}\n                percent={segmentObject.percent}\n                offset={segmentObject.offset}\n                delay={segmentObject.delay}\n                color={segmentObject.color}\n                segId={segmentObject.segId}\n                isInital={this.state.isInital}\n                showSeperator={segmentObject.showSeperator}\n                onAnimationComplete={this.onSegmentAnimationComplete}\n                lineWidth={lineWidth} />\n            )}\n          </svg>\n          <div style={LabelContainerStyle}>\n            <p>Label Here</p>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n// DoughnutChart.propTypes = {\n//   // segments: PropTypes.array\n// }\n\nexport default DoughnutChart\n"],"names":["CircleElement","children","dasharray","dashoffset","props","activeStyles","inactiveStyles","calcStyles","opacity","React","DoughnutChartSegment","animationTimeout","state","setState","animate","prevProps","prevState","snapshot","percent","setTimeout","onAnimationComplete","segId","isInital","offset","color","lineWidth","showSeperator","segmentOffset","seperatorPercentage","mainSegPercentage","Math","max","mainSegmentConfig","segmentContainerStyle","rotation","Component","add","a","b","sum","value","reduce","LabelContainerStyle","CircleBoxStyle","SVGStyle","segmentShown","segment","filters","includes","key","getSegmentConfigs","segments","segmentObjects","segmentPercentage","remainderPercentage","hiddenSegmentCount","total","map","seg","forEach","eachSectionGets","length","segPercent","push","DoughnutChart","animationTimer","onSegmentAnimationComplete","found","findIndex","filter","id","className","show","dropShadow","segmentObject","shown","delay","splicedSegments","slice","calcSegments","defaultProps"],"mappings":"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"}
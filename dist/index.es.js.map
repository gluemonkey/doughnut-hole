{"version":3,"file":"index.es.js","sources":["../src/components/DonutChartSegmentElement.js","../src/components/DonutChartSegment.js","../src/utils.js","../src/components/DonutChart.js"],"sourcesContent":["import React from 'react'\n\nimport PropTypes from 'prop-types'\n\nconst CircleElement = (props) => {\n  const {\n    initalSegmentConfig,\n    animatedSegmentConfig,\n    animatedIn,\n    animationDuration,\n    ...circleProps\n  } = props\n\n  const baseStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: `${animationDuration}, 0s`,\n    transitionDelay: '0s, 0s',\n    transitionTimingFunction: 'linear, linear'\n  }\n\n  const toStyles = {\n    ...baseStyles,\n    strokeDasharray: animatedSegmentConfig.dasharray,\n    strokeDashoffset: animatedSegmentConfig.dashoffset\n  }\n\n  const fromStyles = {\n    ...baseStyles,\n    strokeDasharray: initalSegmentConfig.dasharray,\n    strokeDashoffset: initalSegmentConfig.dashoffset\n  }\n\n  const calcStyles = animatedIn ? toStyles : fromStyles\n\n  return (\n    <circle {...circleProps} style={calcStyles} />\n  )\n}\n\nCircleElement.propTypes = {\n  initalSegmentConfig: PropTypes.shape({\n    dasharray: PropTypes.string,\n    rotation: PropTypes.number,\n    dashoffset: PropTypes.string,\n    color: PropTypes.string\n  }).isRequired,\n  animatedSegmentConfig: PropTypes.shape({\n    dasharray: PropTypes.string,\n    rotation: PropTypes.number,\n    dashoffset: PropTypes.string,\n    color: PropTypes.string\n  }).isRequired,\n  animationDuration: PropTypes.string,\n  animatedIn: PropTypes.bool.isRequired\n}\n\nexport default CircleElement\n","import React, { Component } from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport DonutChartSegmentElement from './DonutChartSegmentElement'\n\nconst calcSegmentConfig = (percent, offset, props) => {\n  const { color, showSeperator } = props\n  const segmentOffset = 25\n  const seperatorPercentage = showSeperator ? 0.7 : 0\n  const mainSegPercentage = Math.max(0, (percent - seperatorPercentage))\n\n  return {\n    dasharray: `${mainSegPercentage} ${100 - mainSegPercentage}`,\n    rotation: ((offset + segmentOffset) / 100) * 360,\n    dashoffset: `0`,\n    color: color\n  }\n}\n\nclass DonutChartSegment extends Component {\n  static propTypes = {\n    percent: PropTypes.number.isRequired,\n    fromPercent: PropTypes.number.isRequired,\n    offset: PropTypes.number.isRequired,\n    fromOffset: PropTypes.number.isRequired,\n    lineWidth: PropTypes.number,\n    animationDuration: PropTypes.string,\n    segmentStyle: PropTypes.oneOf(['flat', 'raised']),\n    segmentShown: PropTypes.bool\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      animate: false\n    }\n  }\n\n  componentDidMount() {\n    const { percent, fromPercent } = this.props\n\n    if (percent !== fromPercent) {\n      setTimeout(() => {\n        this.setState({ animate: true })\n      }, 0)\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (this.props.percent !== prevProps.percent && this.props.percent !== this.props.fromPercent) {\n      setTimeout(() => {\n        this.setState({ animate: true })\n      }, 0)\n    }\n  }\n\n  render() {\n    const {\n      percent,\n      fromPercent,\n      fromOffset,\n      offset,\n      lineWidth,\n      animationDuration,\n      segmentStyle,\n      segmentShown\n    } = this.props\n\n    const { animate } = this.state\n\n    const initialSegmentConfig = calcSegmentConfig(fromPercent, fromOffset, this.props)\n    const toSegmentConfig = calcSegmentConfig(percent, offset, this.props)\n\n    const groupRotate = animate ? toSegmentConfig.rotation : initialSegmentConfig.rotation\n\n    const segmentContainerStyle = {\n      transformOrigin: 'center 50%',\n      transitionProperty: segmentShown ? 'all, opacity' : 'all, opacity',\n      transitionDuration: segmentShown ? `${animationDuration}, 0s` : `${animationDuration}, 0s`,\n      transitionDelay: segmentShown ? '0s, 0s' : `0s, ${animationDuration}`,\n      transitionTimingFunction: 'linear',\n      opacity: segmentShown ? 1 : 0,\n      transform: animate ? `rotate(${toSegmentConfig.rotation}deg)` : `rotate(${initialSegmentConfig.rotation}deg)`\n    }\n\n    return (\n      <g style={segmentContainerStyle} transform={`rotate(${groupRotate} 21 21)`}>\n        <DonutChartSegmentElement\n          cx='21'\n          cy='21'\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke={toSegmentConfig.color}\n          animatedIn={animate}\n          strokeWidth={lineWidth}\n          initalSegmentConfig={initialSegmentConfig}\n          animationDuration={animationDuration}\n          animatedSegmentConfig={toSegmentConfig} />\n        {segmentStyle === 'raised' &&\n          <DonutChartSegmentElement\n            cx='21'\n            cy='21'\n            r='15.91549430918953357688837633725143'\n            fill='transparent'\n            stroke='url(#grad1)'\n            animatedIn={animate}\n            strokeWidth={lineWidth}\n            initalSegmentConfig={initialSegmentConfig}\n            animationDuration={animationDuration}\n            animatedSegmentConfig={toSegmentConfig} />\n        }\n      </g>\n    )\n  }\n}\n\nexport default DonutChartSegment\n","export const add = (a, b) => a + b\nexport const uniq = (value, index, self) => self.indexOf(value) === index\nexport const sum = (value) => value.reduce(add)\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport DonutChartSegment from './DonutChartSegment'\nimport { sum } from '../utils'\n\nconst LabelContainerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#333333',\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  width: '100%',\n  height: '100%'\n}\n\nconst CircleBoxStyle = {\n  position: 'relative',\n  padding: '14px 30px 94% 30px'\n}\n\nconst SVGStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0\n}\n\nconst segmentShown = (segment, filters) => segment.value === 0 || filters.includes(segment.key)\n\nconst getSegmentConfigs = (segments, filters) => {\n  let segmentObjects = []\n  let segmentPercentage = 0\n  let remainderPercentage = 0\n  let hiddenSegmentCount = 0\n\n  const total = sum(segments.map((seg) => seg.value))\n\n  segments.forEach((segment) => {\n    const { value } = segment\n    const percent = (value / total) * 100\n    if (segmentShown(segment, filters)) {\n      remainderPercentage += percent\n      hiddenSegmentCount += 1\n    }\n  })\n\n  const eachSectionGets = remainderPercentage / (segments.length - hiddenSegmentCount)\n\n  segments.forEach((segment) => {\n    const { value, color } = segment\n    const percent = (value / total) * 100\n    let segPercent = eachSectionGets + percent\n    if (segmentShown(segment, filters)) {\n      segPercent = 0\n    };\n\n    segmentObjects.push({\n      percent: segPercent,\n      offset: segmentPercentage,\n      color: color,\n      showSeperator: hiddenSegmentCount < segments.length - 1,\n      shown: !segmentShown(segment, filters)\n    })\n\n    segmentPercentage += segPercent\n  })\n\n  return segmentObjects\n}\n\nclass DonutChart extends Component {\n  static defaultProps = {\n    animationDuration: '0.2s',\n    lineWidth: 9,\n    dropShadow: false,\n    segmentStyle: 'flat',\n    filters: []\n  }\n\n  static propTypes = {\n    children: PropTypes.oneOfType([\n      PropTypes.array,\n      PropTypes.object,\n      PropTypes.string\n    ]),\n    className: PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array,\n      PropTypes.object\n    ]),\n    segments: PropTypes.array.isRequired,\n    lineWidth: PropTypes.number,\n    dropShadow: PropTypes.bool,\n    filters: PropTypes.array,\n    animationDuration: PropTypes.string,\n    segmentStyle: PropTypes.oneOf(['flat', 'raised'])\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      segments: props.segments,\n      oldSegments: props.segments,\n      filters: [],\n      isInital: true\n    }\n  }\n\n  static getDerivedStateFromProps(props, state) {\n    return {\n      ...state,\n      filters: props.filters,\n      segments: props.segments,\n      oldSegments: state.segments\n    }\n  }\n\n  render() {\n    const {\n      className,\n      lineWidth,\n      dropShadow,\n      filters,\n      segmentStyle,\n      animationDuration,\n      children\n    } = this.props\n\n    const newsegmentObjects = getSegmentConfigs(this.state.segments, filters)\n    const oldSegmentObjects = getSegmentConfigs(this.state.oldSegments, filters)\n\n    let segmentObjects = []\n\n    // this means one was removed or it stayed same so merge new into old with old getting 0 percent\n    segmentObjects = oldSegmentObjects.length >= newsegmentObjects.length ? oldSegmentObjects.map((seg, idx) => {\n      const relatedNewObj = newsegmentObjects[idx] || {\n        ...seg,\n        offset: 100,\n        percent: 0,\n        shown: false\n      }\n\n      return {\n        ...seg,\n        ...relatedNewObj,\n        fromOffset: seg.offset,\n        fromPercent: seg.percent\n      }\n    })\n      : newsegmentObjects.map((seg, idx) => {\n        const relatedOldObj = oldSegmentObjects[idx] || {\n          ...seg,\n          offset: 100,\n          percent: 0\n        }\n\n        return {\n          ...seg,\n          fromOffset: relatedOldObj.offset,\n          fromPercent: relatedOldObj.percent\n        }\n      })\n\n    return (\n      <div className={className}>\n        <div style={CircleBoxStyle}>\n          {dropShadow &&\n            <svg width='100%' viewBox='0 0 42 46' style={SVGStyle}>\n              <defs>\n                <radialGradient id='drop' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                  <stop offset='0%' stopColor='#000' stopOpacity='0.4' />\n                  <stop offset='40%' stopColor='#000' stopOpacity='0' />\n                </radialGradient>\n              </defs>\n              <circle\n                cx='16.4'\n                cy='206'\n                className={'shadow'}\n                r='15.91549430918954'\n                fill='url(#drop)'\n                stroke='transparent'\n                strokeWidth='0'\n                transform='scale(1.3,0.2)' />\n            </svg>\n          }\n          <svg width='100%' height='100%' viewBox='0 0 42 42' style={SVGStyle}>\n            <defs>\n              <radialGradient id='grad1' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                <stop offset='20%' stopColor='#000' stopOpacity='0.5' />\n                <stop offset='50%' stopColor='#000' stopOpacity='0' />\n                <stop offset='80%' stopColor='#000' stopOpacity='0.5' />\n              </radialGradient>\n            </defs>\n            {segmentObjects.map((segmentObject) =>\n              <DonutChartSegment\n                segmentShown={segmentObject.shown}\n                percent={segmentObject.percent}\n                fromPercent={segmentObject.fromPercent}\n                offset={segmentObject.offset}\n                fromOffset={segmentObject.fromOffset}\n                delay={segmentObject.delay}\n                color={segmentObject.color}\n                segId={segmentObject.segId}\n                isInital={this.state.isInital}\n                segmentStyle={segmentStyle}\n                showSeperator={segmentObject.showSeperator}\n                lineWidth={lineWidth}\n                animationDuration={animationDuration} />\n            )}\n          </svg>\n          <div style={LabelContainerStyle}>\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DonutChart\n"],"names":["CircleElement","props","initalSegmentConfig","animatedSegmentConfig","animatedIn","animationDuration","circleProps","baseStyles","toStyles","dasharray","dashoffset","fromStyles","calcStyles","propTypes","PropTypes","shape","string","number","isRequired","bool","calcSegmentConfig","percent","offset","color","showSeperator","segmentOffset","seperatorPercentage","mainSegPercentage","Math","max","DonutChartSegment","state","fromPercent","setState","animate","prevProps","prevState","snapshot","fromOffset","lineWidth","segmentStyle","segmentShown","initialSegmentConfig","toSegmentConfig","groupRotate","rotation","segmentContainerStyle","DonutChartSegmentElement","Component","oneOf","add","a","b","sum","value","reduce","LabelContainerStyle","CircleBoxStyle","SVGStyle","segment","filters","includes","key","getSegmentConfigs","segments","segmentObjects","segmentPercentage","remainderPercentage","hiddenSegmentCount","total","map","seg","forEach","eachSectionGets","length","segPercent","push","DonutChart","className","dropShadow","children","newsegmentObjects","oldSegmentObjects","oldSegments","idx","relatedNewObj","relatedOldObj","segmentObject","shown","delay","segId","isInital","defaultProps","oneOfType","array","object"],"mappings":"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"}
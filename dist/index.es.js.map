{"version":3,"file":"index.es.js","sources":["../src/components/DoughnutChartSegment.js","../src/utils.js","../src/components/DoughnutChart.js"],"sourcesContent":["import React, { Component } from 'react'\n\nconst CircleElement = ({children, dasharray, dashoffset, ...props}) => {\n  const activeStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.3s, 0s',\n    transitionDelay: '0s, 0s',\n    transitionTimingFunction: 'linear, linear',\n    strokeDasharray: dasharray,\n    strokeDashoffset: dashoffset\n  }\n  const inactiveStyles = {\n    transitionProperty: 'all, opacity',\n    transitionDuration: '0.3s, 0s',\n    transitionDelay: '0s, 0.3s',\n    transitionTimingFunction: 'linear, linear',\n    strokeDasharray: dasharray,\n    strokeDashoffset: dashoffset\n  }\n  const calcStyles = props.opacity === 1 ? activeStyles : inactiveStyles\n  return (\n    <circle\n      {...props}\n      style={calcStyles} />\n  )\n}\n\nclass DoughnutChartSegment extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      isVisible: false,\n      shown: false,\n      percentage: 0\n    }\n  }\n\n  render() {\n    const { percent, offset, color, lineWidth, delay, showSeperator, segmentShown} = this.props;\n    const segmentOffset = 25\n    const seperatorPercentage = showSeperator ? 0.7 : 0\n    const mainSegPercentage = Math.max(0, (percent - seperatorPercentage))\n\n    const mainSegmentConfig = {\n      dasharray: `${mainSegPercentage} ${100 - mainSegPercentage}`,\n      rotation: ((offset + segmentOffset) / 100) * 360,\n      dashoffset: `0`,\n      color: color\n      // delay: delay,\n    }\n\n    const segmentContainerStyle = {\n      transformOrigin: 'center 50%',\n      transitionProperty: 'all',\n      transitionDuration: '0.3s',\n      transitionDelay: '0s',\n      transitionTimingFunction: 'linear',\n      // opacity: (shown ? 1 : 0),\n      opacity: 1,\n      transform: `rotate(${mainSegmentConfig.rotation}deg)`\n    }\n\n    console.log(mainSegmentConfig.rotation);\n\n    return (\n      <g style={segmentContainerStyle}>\n        <CircleElement\n          cx='21'\n          cy='21'\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke={mainSegmentConfig.color}\n          strokeWidth={lineWidth}\n          // opacity={segmentShown ? 1 : 0}\n          dasharray={mainSegmentConfig.dasharray}\n          dashoffset={mainSegmentConfig.dashoffset} />\n        <CircleElement\n          cx='21'\n          cy='21'\n          // opacity={segmentShown ? 1 : 0}\n          r='15.91549430918953357688837633725143'\n          fill='transparent'\n          stroke='url(#grad1)'\n          strokeWidth={lineWidth}\n          dasharray={mainSegmentConfig.dasharray}\n          dashoffset={mainSegmentConfig.dashoffset} />\n      </g>\n    )\n  }\n}\n\nexport default DoughnutChartSegment\n","export const add = (a, b) => a + b\nexport const uniq = (value, index, self) => self.indexOf(value) === index\nexport const sum = (value) => value.reduce(add)\n","import React, { Component } from 'react'\nimport DoughnutChartSegment from './DoughnutChartSegment'\nimport { sum } from '../utils'\n\nconst ContainerStyle = {\n  position: 'relative',\n  maxWidth: '260px',\n  color: 'white',\n  border: '1px solid #cccccc',\n  borderRadius: '6px',\n  overflow: 'hidden',\n  margin: '18px'\n}\n\nconst LabelContainerStyle = {\n  display: 'flex',\n  flexDirection: 'column',\n  justifyContent: 'center',\n  alignItems: 'center',\n  color: '#333333',\n  position: 'absolute',\n  top: '0',\n  left: '0',\n  width: '100%',\n  height: '100%'\n}\n\nconst CircleBoxStyle = {\n  position: 'relative',\n  padding: '14px 30px 75% 30px'\n}\n\nconst SVGStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0\n}\n\nconst segmentShown = (segment, props) => segment.value === 0 || props.filters.includes(segment.key)\n\nconst getSegmentConfigs = (props) => {\n  const { segments } = props\n\n  let segmentObjects = []\n  let segmentPercentage = 0\n  let remainderPercentage = 0\n  let unshown = 0\n  let int = 0\n\n  const total = sum(segments.map((seg) => seg.value))\n\n  segments.forEach((segment) => {\n    const { value } = segment\n    const percent = (value / total) * 100\n    if (segmentShown(segment, props)) {\n      remainderPercentage += percent\n      unshown += 1\n    }\n  })\n\n  const eachSectionGets = remainderPercentage / (segments.length - unshown)\n\n  segments.forEach((segment) => {\n    const { value, color } = segment\n    const percent = (value / total) * 100\n    let segPercent = eachSectionGets + percent\n    if (segmentShown(segment, props)) {\n      segPercent = 0\n    };\n\n    segmentObjects.push({\n      percent: segPercent,\n      offset: segmentPercentage,\n      color: color,\n      delay: (int * 0.3) + 0.1,\n      showSeperator: unshown < 2,\n      shown: percent !== 0\n    })\n\n    int += 1\n    segmentPercentage += segPercent\n  })\n\n  return segmentObjects\n}\n\nclass DoughnutChart extends Component {\n  static defaultProps = {\n    progress: 0,\n    animate: true,\n    animationDuration: '1s',\n    showPercentage: true,\n    showPercentageSymbol: true,\n    progressColor: '#000',\n    bgColor: '#000',\n    textColor: '#6b778c',\n    size: '400',\n    lineWidth: '9',\n    dropShadow: true,\n    percentSpacing: 10\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      isVisible: false,\n      shown: false,\n      percentage: 0\n    }\n  }\n\n  render() {\n    const { className, show, lineWidth, dropShadow } = this.props\n\n    let segmentObjects = getSegmentConfigs(this.props)\n\n    return (\n      <div className={className}>\n        <div style={ContainerStyle}>\n          <div style={CircleBoxStyle}>\n            {dropShadow &&\n              <svg width='100%' height='100%' viewBox='0 0 42 46' style={SVGStyle}>\n                <defs>\n                  <radialGradient id='drop' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                    <stop offset='0%' stopColor='#000' stopOpacity='0.4' />\n                    <stop offset='40%' stopColor='#000' stopOpacity='0' />\n                  </radialGradient>\n                </defs>\n                <circle\n                  cx='16.4'\n                  cy='206'\n                  className={'shadow'}\n                  r='15.91549430918954'\n                  fill='url(#drop)'\n                  stroke='transparent'\n                  strokeWidth='0'\n                  transform='scale(1.3,0.2)'\n                  style={{\n                    transition: 'opacity 0.5s ease-in-out',\n                    opacity: show ? 1 : 0\n                  }} />\n              </svg>\n            }\n            <svg width='100%' height='100%' viewBox='0 0 42 42' style={SVGStyle}>\n              <defs>\n                <radialGradient id='grad1' cx='50%' cy='50%' r='100%' fx='50%' fy='50%'>\n                  <stop offset='20%' stopColor='#000' stopOpacity='0.5' />\n                  <stop offset='50%' stopColor='#000' stopOpacity='0' />\n                  <stop offset='80%' stopColor='#000' stopOpacity='0.5' />\n                </radialGradient>\n              </defs>\n              {segmentObjects.map((segmentObject) =>\n                <DoughnutChartSegment\n                  segmentShown={segmentObject.shown}\n                  percent={segmentObject.percent}\n                  offset={segmentObject.offset}\n                  delay={segmentObject.delay}\n                  color={segmentObject.color}\n                  showSeperator={segmentObject.showSeperator}\n                  lineWidth={lineWidth} />\n              )}\n            </svg>\n            <div style={LabelContainerStyle}>\n              <p>Label Here</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\n// DoughnutChart.propTypes = {\n//   // segments: PropTypes.array\n// }\n\nexport default DoughnutChart\n"],"names":["CircleElement","children","dasharray","dashoffset","props","activeStyles","inactiveStyles","calcStyles","opacity","DoughnutChartSegment","state","percent","offset","color","lineWidth","delay","showSeperator","segmentShown","segmentOffset","seperatorPercentage","mainSegPercentage","Math","max","mainSegmentConfig","segmentContainerStyle","rotation","log","Component","add","a","b","sum","value","reduce","ContainerStyle","LabelContainerStyle","CircleBoxStyle","SVGStyle","segment","filters","includes","key","getSegmentConfigs","segments","segmentObjects","segmentPercentage","remainderPercentage","unshown","int","total","map","seg","forEach","eachSectionGets","length","segPercent","push","DoughnutChart","className","show","dropShadow","segmentObject","shown","defaultProps"],"mappings":"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"}